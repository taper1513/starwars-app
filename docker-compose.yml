services:
  app:
    build: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/var/www
      - vendor_app:/var/www/vendor
      - storage_app:/var/www/storage
    command: >
      sh -c "composer install --no-interaction --prefer-dist &&
             composer dump-autoload &&
             php artisan config:clear &&
             php artisan cache:clear &&
             php artisan package:discover &&
             php artisan storage:link &&
             php artisan vendor:publish --tag=swagger-l5-swagger &&
             php artisan l5-swagger:generate &&
             php artisan serve --host=0.0.0.0 --port=8000"
    depends_on:
      - redis
    environment:
      CACHE_DRIVER: redis
      CACHE_STORE: redis
      LOG_CHANNEL: stdout
      LOG_LEVEL: debug
      LOG_STACK: stdout
      APP_DEBUG: true
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
      L5_SWAGGER_GENERATE_ALWAYS: true
      L5_SWAGGER_CONST_HOST: http://localhost:8000/api
      L5_SWAGGER_USE_ABSOLUTE_PATH: true
      L5_FORMAT_TO_USE_FOR_DOCS: json

  cachewarmer:
    build: ./backend
    command: php artisan swapi:warm-cache
    depends_on:
      - app
    
  queue:
    build: ./backend
    volumes:
      - ./backend:/var/www
      - vendor_app:/var/www/vendor
    command: php artisan queue:work --tries=1 --max-jobs=1000 --max-time=3600 --sleep=3 --memory=128
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    depends_on:
      - redis
    environment:
      CACHE_DRIVER: redis
      CACHE_STORE: redis
      LOG_CHANNEL: stdout
      LOG_LEVEL: debug
      LOG_STACK: stdout
      APP_ENV: local
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
      APP_DEBUG: true
  
  scheduler:
    build: 
      context: ./backend
      dockerfile: Dockerfile.scheduler
    volumes:
      - ./backend:/var/www
      - vendor_app:/var/www/vendor
    depends_on:
      - app
      - queue
      - redis
    environment:
      CACHE_DRIVER: redis
      CACHE_STORE: redis
      QUEUE_CONNECTION: redis
      REDIS_HOST: redis
      LOG_CHANNEL: stdout
      LOG_LEVEL: debug
      LOG_STACK: stdout
      APP_ENV: local
      APP_DEBUG: true
    command: cron -f

  frontend:
    build: 
      context: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - app

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"

  api-tests:
    build: ./backend
    volumes:
      - ./backend:/var/www
      - vendor_app:/var/www/vendor
    command: sh -c "cp -n .env.example .env.testing && php artisan key:generate --env=testing && php artisan test"
    environment:  
      LOG_LEVEL: error
      APP_ENV: testing

  frontend-tests:
    build:
      context: ./frontend
      dockerfile: Dockerfile.unitTests
    volumes:
    - ./frontend:/app
    command: sh -c "npm install && npm test"

volumes:
  vendor_app:
  storage_app: